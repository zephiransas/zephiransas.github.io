<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Crystal Heroku on zephiransasのチラシの裏</title>
    <link>https://zephiransas.github.io/categories/crystal-heroku/</link>
    <description>Recent content in Crystal Heroku on zephiransasのチラシの裏</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 10 Nov 2015 12:28:48 +0000</lastBuildDate>
    
	<atom:link href="https://zephiransas.github.io/categories/crystal-heroku/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CrystalをHerokuで動かしてみた</title>
      <link>https://zephiransas.github.io/blog/2015/11/10/crystal-on-heroku/</link>
      <pubDate>Tue, 10 Nov 2015 12:28:48 +0000</pubDate>
      
      <guid>https://zephiransas.github.io/blog/2015/11/10/crystal-on-heroku/</guid>
      <description>最近ちょっと話題のcrystal。これをHerokuで動かしてみました。
Herokuの準備 まずはHerokuにアプリケーションを作成します。
Herokuでは当然crystalをサポートしていませんので、crystalのコンパイラを自前でインストールする必要があります。 Herokuにはこういったことを実現するために、buildpackという仕組みが用意されています。
crystal用のbuildpackは既にあるので、今回はこれを利用します。
 zamith/heroku-buildpack-crystal - https://github.com/zamith/heroku-buildpack-crystal  heroku createする際に上記のbuildpackを指定しておきます。
heroku create --buildpack https://github.com/zamith/heroku-buildpack-crystal  ちなみに、これはあとから指定することも可能です。
heroku  アプリケーションの準備 次にcrystalで簡単なWebサーバを実装します。といってもcrystalの公式ページにあるサンプルに手を加えた簡単なものです。
app.crというファイル名で以下のファイルを準備します。
require &amp;quot;http/server&amp;quot; require &amp;quot;option_parser&amp;quot; server_port = 8080 OptionParser.parse! do |opts| opts.on(&amp;quot;-p PORT&amp;quot;, &amp;quot;--port PORT&amp;quot;, &amp;quot;define port to run server&amp;quot;) do |port| server_port = port.to_i end end server = HTTP::Server.new(&amp;quot;0.0.0.0&amp;quot;, server_port) do |request| HTTP::Response.ok &amp;quot;text/plain&amp;quot;, &amp;quot;Hello world, got #{request.path}!&amp;quot; end puts &amp;quot;Listening on http://0.0.0.0:#{server_port}&amp;quot; server.listen  注意するところは2点。</description>
    </item>
    
  </channel>
</rss>