<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on zephiransasのチラシの裏</title>
    <link>https://zephiransas.github.io/categories/java/</link>
    <description>Recent content in Java on zephiransasのチラシの裏</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 31 Dec 2016 12:47:59 +0000</lastBuildDate>
    
	<atom:link href="https://zephiransas.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>スクフェス・ログサーバをつくった</title>
      <link>https://zephiransas.github.io/blog/2016/12/31/schfeslogsvr/</link>
      <pubDate>Sat, 31 Dec 2016 12:47:59 +0000</pubDate>
      
      <guid>https://zephiransas.github.io/blog/2016/12/31/schfeslogsvr/</guid>
      <description>今日は大晦日ですね。年末ですが今年も例によって、コード書いたりプラモ作ったり、普段の連休と同じくダラダラ過ごしております。
ところで今年のラブライブ！アドベントカレンダーはチェックしましたか？ 自分も20日目に劇場版ラブライブとμ’ｓメンバーのその後というタイトルでエントリしてます。 今年はその他にも、さまざまな視点から見た素晴らしいエントリがたくさん集まってますので、ラブライバーならぜひチェックしてみてください。
で、22日目のエントリには@hideo54さんのスクフェスのライブスコアを取得する”schfeslog”を作った話というのがあります。 これはnodeで建てたプロキシを使って、スクフェスがサーバに送信してる通信内容をみて、ライブのプレイ結果をツイートすることができるツールです。
 hideo54/schfeslog - https://github.com/hideo54/schfeslog  これをみて「お、ツイートできるんなら、外部サーバにも送信できるんじゃね？」ってことで、早速コードを書いてみました。
まずはschfeslog側に外部サーバへの通信機能を実装しています。該当するPull Requestはこちら。単純にプレイデータをJSON形式にして、設定でされたサーバにPOSTするだけです。
これを受信するサーバはこちら。
 zephiransas/schfeslogsvr - https://github.com/zephiransas/schfeslogsvr  送信されたプレイデータを一覧で見ることもできます。ちなみに私のプレイデータがこちら
 schfeslog - http://schfeslog.herokuapp.com/  見た目とかは、もうちょっと改善したいところです・・・
最近、ちょっとJavaの案件をやってるせいもあって、真面目にSpring Bootで書いています。こういったRESTなアプリケーションを作るにはSpring Bootはとても簡単でいいですね。
サーバ側は簡単に自分用に環境を作れるよう、Deploy to Herokuボタンも準備してますので、興味のあるかたはschfeslogと一緒に、ぜひ試してみてください。</description>
    </item>
    
    <item>
      <title>Maven Wrapperを使ってプロジェクトで使うMavenのバージョンを指定する</title>
      <link>https://zephiransas.github.io/blog/2016/05/23/maven-wrapper/</link>
      <pubDate>Mon, 23 May 2016 16:34:12 +0000</pubDate>
      
      <guid>https://zephiransas.github.io/blog/2016/05/23/maven-wrapper/</guid>
      <description>Javaでの開発において、ライブラリのバージョン管理にMavenを用いているところはたくさんあると思います。
しかし、pom.xmlを使って各ライブラリのバージョンを管理していても、各開発者が使うMavenのバージョンを固定することはできません。
プロジェクトで使うMavenのバージョンを固定したい！そんな場合に使えるのがMaven Wrapperです。
 takari/maven-wrapper -　https://github.com/takari/maven-wrapper  導入方法 導入方法は至って簡単。
maven wrapperを適用したいプロジェクトに移動して、以下のコマンドを発行するだけ。
mvn -N io.takari:maven:wrapper  これだけで、プロジェクトに以下のファイルが追加されます。
 mvnw - Maven Wrapper経由でmavenを実行するためのファイル mvnw.cmd - mvnwのWindows版。Windowsで使う場合はこっちを使いましょう。 .mvnディレクトリ - maven wraperがダウンロードしてきたMavenのバイナリとかが入ってる  上記のコマンドだと実行時の最新のバージョンが使用されるので、バージョンを指定したい場合はオプションで
mvn -N io.takari:maven:wrapper -Dmaven=3.3.1  としてやりましょう。以降は今まで
mvn clean mvn package  としていたのをmvnwコマンドに置き換えるだけで
./mvnw clean ./mvnw package  固定されたバージョンをMavenを利用することができます。
.gitignoreの設定 ~~ Gitなどのバージョン管理にはmvnwとmvnw.cmdのみコミット対象とし、.mvnディレクトリはコミット対象外にしましょう。 ~~
はい、これウソでしたorz
正しくは「.mvnディレクトリもコミットしましょう」です。
YOSHIDAさん慣れないジャバやるから
&amp;mdash; やっぱりおいしい木村屋のパン (@razon) 2016年5月24日 
はい、その通りですね（真顔</description>
    </item>
    
    <item>
      <title>JavaプログラマがKindle50%還元セールで買っておくべきIT技術書</title>
      <link>https://zephiransas.github.io/blog/2015/05/31/java-programmer-must-buy/</link>
      <pubDate>Sun, 31 May 2015 22:29:48 +0000</pubDate>
      
      <guid>https://zephiransas.github.io/blog/2015/05/31/java-programmer-must-buy/</guid>
      <description>Kindle Storeでセールをやってるようです。今回は50%をポイント還元するってセールらしいです。
で、こちらを見てたらRubyやPHPはあっても、Javaがなかったので、ついカッとなってJavaプログラマ向けのオススメ技術書をチョイスしました。 セールは6/1の正午までですので、お早めにどーぞ。
 これは店頭で目次を見た程度です。わりと初心者向けな印象なので、これからJavaを勉強したい人にオススメです。
 いわずと知れた「パーフェクトシリーズ」のJava版。広範囲に網羅されているので、手元に置いておけば長く使えると思います。初心者でも可。
 これも「逆引きレシピシリーズ」のJava版。リファレンス的に使うのならコイツは鉄板。
 そもそもJava EEの日本語の本は少ないのですが、最新のJava EE7に対応した本。
 1つ前のバージョンであるJava EE6の本。通称「金魚本」。Java EE6と多少古くはあるがJava EE7と全然違うというわけでもないので、未だに現役で使えるはず。内容はある程度Java EE6の仕組みを理解している人がリファレンス的に使う感じだと思います。
現場からは以上です。</description>
    </item>
    
    <item>
      <title>Project Kullaを試す</title>
      <link>https://zephiransas.github.io/blog/2015/04/16/project-kulla/</link>
      <pubDate>Thu, 16 Apr 2015 12:26:30 +0000</pubDate>
      
      <guid>https://zephiransas.github.io/blog/2015/04/16/project-kulla/</guid>
      <description>以前から気になっていたJavaのREPL、Project Kullaを動かしてみました。
REPLとはRead-eval-print loopの略で、CUIからコードを直接入力していって、その場で動作を確認できるツールです。 Rubyであればirbやpryなどが有名ですね。
Project KullaはOpenJDKにて開発されている、JavaのREPL環境をつくるプロジェクトです。 ちなみにこの機能はJDK9で、正式導入される予定になっています。
JLine2のインストール 早速REPL環境を動かしてみたいところですが、まずは前準備として、Kullaに必要なJLine2というライブラリをビルドします。
ソースコードはGitHubのリポジトリでホストされていますので
git clone git@github.com:jline/jline2.git cd jline2 mvn install  ちなみにJLine2はJDK8以前でないとビルドできないので注意です。
ビルドに成功するとjline2/targetディレクトリにjline-2.13-SNAPSHOT.jarが作成されます。Kullaからは、このjarを利用します。
JDK9 EAのインストール KullaのビルドにはJDK9が必要です。こちらからJDK9をダウンロードし、インストールします。 自分がインストールしたのは、以下のバージョン。
java version &amp;quot;1.9.0-ea&amp;quot; Java(TM) SE Runtime Environment (build 1.9.0-ea-b59) Java HotSpot(TM) 64-Bit Server VM (build 1.9.0-ea-b59, mixed mode)  その後、使用するJAVA_HOMEをJDK9に設定します。
普段、自分はJAVA_HOMEの設定にjava_homeコマンドを使用しているので、.bash_profileに
export JAVA_HOME=`/usr/libexec/java_home -v 1.8`  としてJDK8を使用しています。今回はJDK9を使いたいので、これを
export JAVA_HOME=`/usr/libexec/java_home -v 1.9`  とし
source ~/.bash_profile  として、JDK9を有効にします。
Kullaのビルド いよいよKullaのソースをダウンロードしてビルドします。
hg clone http://hg.openjdk.java.net/kulla/dev ~/kulla cd ~/kulla  次に、その他必要なソース類を取得します。</description>
    </item>
    
    <item>
      <title>lambda-behaveでテストを書こう</title>
      <link>https://zephiransas.github.io/blog/2014/12/16/about-lambda-behave/</link>
      <pubDate>Tue, 16 Dec 2014 18:17:15 +0000</pubDate>
      
      <guid>https://zephiransas.github.io/blog/2014/12/16/about-lambda-behave/</guid>
      <description>これはJavaアドベントカレンダー2014の12/16分の記事です。
昨日はgrimroseさんの、[書評] Gradle徹底入門 でした。
明日は@com4dcさんの、はじめて触るStreamの世界 です。
自分はJavaのテストフレームワークである、lambda-behaveについて紹介します。
自分は普段はRailsでの開発を行っているのですが、現場では主にRSpecを使ってテストを記述しています。RSpecでのテストは以下のような感じです。
describe &#39;Sample&#39; do context &#39;hogeメソッドについて&#39; do it &#39;fugaを返すこと&#39; do Sample.hoge.should == &amp;quot;fuga&amp;quot; end end end  RSpecでは上記のようにDSLを使って、なにをテストしているかを構造的に記述することができます。 lambda-behaveを使うと、このようなDSLっぽい記述のテストを、Java8のLambdaを使って書くことができるようになります。
最初のテスト まずはテスト対象となるメソッドを準備します。
public class Sample { public static int includeTax(Integer price) { return 0; } }  上記のようなstaticなメソッドを準備します。includeTaxメソッドは引数を一つ取り、その税込み金額を返すメソッドとします。実にギョーミーですね！
今回はTDD的なノリで実装していきますので、ここでは中身の実装はおこないません。
それでは実際のテストを書いて行きましょう。ここでのテストシナリオは
 includeTaxメソッドに100を渡した場合に、108が返ってくること  をテストするとします。これをlambda-behaveで書くと、以下のようになります。
{% raw %}
import static com.insightfullogic.lambdabehave.Suite.*; @RunWith(JunitSuiteRunner.class) public class SampleSpec {{ describe(&amp;quot;includeTax&amp;quot;, it -&amp;gt; { it.should(&amp;quot;税込み価格が取得できること&amp;quot;, expect -&amp;gt; expect.that(Sample.includeTax(100)).is(108) ); }); }}  {% endraw %}</description>
    </item>
    
    <item>
      <title>JJUG CCC 2014 Fallで発表してきた</title>
      <link>https://zephiransas.github.io/blog/2014/11/17/attend-jjug-ccc-2014-fall/</link>
      <pubDate>Mon, 17 Nov 2014 20:40:56 +0000</pubDate>
      
      <guid>https://zephiransas.github.io/blog/2014/11/17/attend-jjug-ccc-2014-fall/</guid>
      <description>11月15日に、東京は新宿の西新宿ベルサールにて開催されたJJUG CCC 2014 Fallに参加してきました。
JJUC CCC（クロス・コミュニティ・カンファレンス）日本Javaユーザ会が春/秋と、年に2回開催している、JJUG主催としては最大のイベントです。
今回はこれのセッション公募(CfP)に応募したところ嬉しい事にセッション枠を1つ受け持つことになったので、それも兼ねて東京まで参加してきました。 久々に東京のJavaコミュニティの勉強会で、普段はTL上でしか面識のない人たちに会えるのも、楽しみの一つ。
いつもの面々（失礼）もそうですが、今回は以前からお会いしたいと思っていた @kikutaro_ さんと、お昼をご一緒させていただくことができました。TL上での発言を見て「真面目な好青年っぽいなー」という印象を持っていましたが、会ってもやはり好青年でした。
普段から何をツイートするか、考えて発言しないといけませんね！！ （ｹﾞﾌﾝｹﾞﾌﾝ
それから余談ですが、実は大都会ITクラスタは過去、JJUG CCCのスピーカを3人輩出しています。
最初は独立国家福山に住む「@soudai1025 氏」
それから岡山Javaユーザ会/倉敷天領Scala勉強会に所属する「@razon 氏」
あとは「@mao_instantlife 氏」
他の地方で、これだけスピーカが出てるところはないように思うので、ちょっと自慢していいような気もしますw
自分のセッションについて 今回自分はRailsライクなWebフレームワーク「ninjaframework」について、セッションを行いました。以下はその資料。
 一番小さい部屋だったので、おそらく40~50人程度の方がいらしていたと思います。
当日、他のセッションでSpring Bootのセッションとハンズオンがあり「これはネタを選択し間違えた感・・・」と思ったのは内緒。
久々の発表だったり、資料作りが思うように進まなくて、練習もろくにできなかったりで、たどたどしいことこの上ないセッションになってしまったような気がします・・・
しかも50分の予定が40分程度で終わってしまい、困ったなーと思っていたところ、Q&amp;amp;Aで意外にも多くの方から質問を頂きました。その結果、きっちり50分！
あまりうまくいかなかった部分もありましたが、最後まで聞いていただいた皆さん、大変にありがとうございます！
Java女子部の台頭 以下はセッションの内容とはあまり関係ない、参加して自分が肌で感じたことです。
今回のCCCで一番思ったことが、女性の参加者が多いこと。
個人的にですが、エンジニアの世界はまだまだ男性中心な世界だなと感じていて、女性でバリバリコード書いたり、勉強会で発表してる人って少ないのが現状です。（それが良いとも悪いともいいません。それは本質ではないので。）
なので、今回のCCCに多くの女性エンジニアがいたことには正直驚きました。最近、女性エンジニアの有志を中心に「Java女子部」なるコミュニティが発足したことは知っていましたが、それが広まってきてる感じです。
エンジニアという職業が成熟していく過程に、女性が活躍できる環境というのは必須だと思います。また、それがエンジニアという仕事を一生の仕事にするためにも、必要なことだと思います。
Java女子部の女の子たちみんな可愛かったのでみんなJavaやるべき
&amp;mdash; しょぼちむ@どうもネカマです (@syobochim) 2014, 11月 15 
Javaコミュニティの復活の兆し  つい先日発売された「Javaエンジニア養成読本」（通称「妖精本」）の巻頭記事に、Javaのコミュニティの歴史について触れている部分があります。
自分がJavaのコミュニティに最初に触れたのは、Seasarが流行っていた時代です。
その後Javaのコミュニティは、Sunの不振などもあり少しづつ勢いを失ってきたように思います。
しかし今回のCCCの参加登録数は約650名で過去最高。また懇親会の参加者も受付開始するとあっという間に満席になり、最終的には100名とこちらも過去最高。自分にとっても最高に楽しい時間でした。
 JJUG CCC 2014 Fall 懇親会 - https://www.flickr.com/photos/zephiransas/sets/72157648917084929/  この飲み会、Java最盛期っぽい！
&amp;mdash; きしだﬗ (@kis) 2014, 11月 15 
これもひとえに2007年4月にJJUGが発足以来、地道に活動してこられた多くの人たちの努力の賜物です。</description>
    </item>
    
    <item>
      <title>Java8で始めるLambda（基礎編）</title>
      <link>https://zephiransas.github.io/blog/2014/03/12/java8lambda/</link>
      <pubDate>Wed, 12 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://zephiransas.github.io/blog/2014/03/12/java8lambda/</guid>
      <description>まもなくリリース予定のJava8。その中でも最も大きなインパクトを持つというProject Lambdaについて、ここ数日調べてみました。 今からLambdaをはじめようとする人向けに、何回かに分けてまとめてみたいと思います。
インターフェースの宣言 まずは手始めに、引数で指定された文字列の前後に&amp;rdquo;[&amp;ldquo;と&amp;rdquo;]&amp;ldquo;をつける処理を考えてみましょう。
Lambdaを使用するには、まずインターフェースを宣言する必要があります。上記の仕様から考えると
 引数はString型の引数が1つ 戻り値もString型  となるので、この場合は以下の様なインターフェースを宣言します。
public interface LambdaInterface { String method(String value); }  ここで注意するべきことが1つ。Java8のLambdaとして使えるインターフェースには決まりがあるのですが、もっとも重要なのがインターフェースのメソッドが1つだけということです。インターフェースのメソッドが2つ以上ある場合には、それをLambdaとして使用することはできません。
これはLambdaの実装部分を書く際に、どのメソッドの内容を実装しているのかを書かないため、Lambdaを書いた場合はそのインターフェースがもつ唯一のメソッドに対して実装をおこなったとみなすからです。
一見、これは不便なように思ってしまうかもしれないですが、普段使うパターンのインターフェースのほとんどがjava.util.functionパッケージ内で用意されているので、実際にはそれ程不便ではありません。むしろ自分でインターフェースを用意するほうが稀かもしれません。
Lambdaを使った記述 早速、先に宣言したインターフェースを使ってLambdaを書いてみましょう。Lambdaを記述する際の基本となる文法は、以下のようになっています。
[インターフェース名] [lambda式の名前] = (引数の型 引数,...) -&amp;gt; { （実装） };  よってLambdaInterfaceを使って書くと、以下のようになります。
public class Sample { public static void main(String... args) { LambdaInterface lambda = (String value) -&amp;gt; { return &amp;quot;[&amp;quot; + value + &amp;quot;]&amp;quot;; }; System.out.println(lambda.method(&amp;quot;HOGE&amp;quot;)); } }  実行すると&amp;rdquo;[HOGE]&amp;ldquo;と出力されていることがわかると思います。
このように、匿名クラスを使った場合などと比べて、少ない記述量で実装できると思います。
Lambdaの省略記法 また、このLambdaの記述では、以下のルールで、省略した記述を使用することもできます。
 引数の型は（型推論できるので）省略できる 引数が1つの場合は、引数の()を省略できる 但し、引数なしの場合は省略できない 実装部分が1行の場合は、{}を省略可能。さらにreturn文も不要  上記ルールに沿ったLambdaであれば省略可能です。ですので先ほどのコードも以下の様に省略できます。</description>
    </item>
    
    <item>
      <title>Java Day Tokyo 2013報告会@岡山を開催してきた</title>
      <link>https://zephiransas.github.io/blog/2013/06/18/jdt2013-okayama-report/</link>
      <pubDate>Tue, 18 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://zephiransas.github.io/blog/2013/06/18/jdt2013-okayama-report/</guid>
      <description>2013年6月15日（土）に、奉還町リブラホールにて「Java Day Tokyo 2013報告会@岡山」を開催してきました。
自分は「Java Day Tokyo2013基調公演より」と題して、報告をさせていただきました。
 当日のTwitterのまとめは、こちら
その他、岡山Javaユーザ会の運営メンバーと、@soudai1025氏にはJJUG CCCの感想についてもセッションをしていただきました。また角田さんの会社の同僚お二人にもJava Day Tokyoに参加しての感想を話していただきました。
また東京からは櫻庭さんにも来て頂き、JJUG CCCでセッションされた「Project Lambda Essential」を再演していただきました。Java8で最も注目されている機能、Project Lambdaの大事なところを丁寧にお話をしていただきましたので、参加者の皆さんのLambdaに対する理解が深まったものと思います。
この後の懇親会でも次のネタについて、いくつか話あったんですが、個人的には次はハンズオンをやりたいかなーと思っています。
いまのセッション形式もいいのですが、それだとどうしても参加者同士で交流が深まらないように思っていて、これを改善するためにはハンズオン形式のほうがいいのではないだろうか、と考えています。 で、実際にやるとすればJavaEEとかJavaFXあたりを題材にして、ハンズオンをやろうと考えています。</description>
    </item>
    
    <item>
      <title>GlassFishのアップグレード方法</title>
      <link>https://zephiransas.github.io/blog/2013/05/24/how-to-upgrade-gf/</link>
      <pubDate>Fri, 24 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://zephiransas.github.io/blog/2013/05/24/how-to-upgrade-gf/</guid>
      <description>会社で使ってるJenkinsさんはGlassFish上で動いているんですが、これのアップグレードを行ったので、そのメモ。
具体的にはGlassFish 3.1.1からGlassFish 3.1.2へアップグレードしました。
updatetoolのインストール まずはアップグレードに使用するupdatetoolをインストールします。
方法はasadminと同じディレクトリにある、updatetoolを実行するだけ。
初めてupdatetoolコマンドを実行した際に、updatetoolをインストールするか聞いてきますので、yを押してインストールするだけです。
ちょっと時間がかかるので、アニメでも見ながらゆっくり待ちましょう。
updatetoolからGlassFishのアップグレード 上記の手順でupdatetoolのインストールが終了したら、もう一度updatetoolコマンドを実行します。するとGUIが立ち上がって来ますので、以下のようにするだけ。
あとは
$ ./asadmin version  などで、アップグレードできていることを確認しましょう。</description>
    </item>
    
    <item>
      <title>Java Day Tokyo 2013に参加してきた（セッション）</title>
      <link>https://zephiransas.github.io/blog/2013/05/18/javadaytokyo2/</link>
      <pubDate>Sat, 18 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://zephiransas.github.io/blog/2013/05/18/javadaytokyo2/</guid>
      <description>前回の基調講演につづいて、今回は自分が参加したセッションのレポートです。
Ask the Experts 基調講演にも登壇したJavaSE,JavaFX,JavaEEの各キーパーソンに、直接質問できるセッションです。ちょうど昼の時間だったので、本来は昼食をとりつつ受けるセッションなんですが、うっかり自分は昼食を仕入れるのを忘れてました・・・
JavaSEの担当は、Simon Ritter氏
JavaFXの担当は、Jim Weaver氏
JavaFXの担当は、Arun Gupta氏
通訳の方が居たので、もちろん日本語で質問できたのですが、意外と質問が少ないような感じでした。
印象に残ったのは、最後のJavaEEの質問で
 Q「JavaEEはいろんな仕様で構成されているが、最低限どれを使ってればJavaEEを使ってることになるのか？」  という質問がありました。（ちょっと意地悪な質問な気もしますがw）それに対してArunは
 A「難しい質問だけど、強いて言えばServletかな？あ、でも、Strutsはダメだね！」  と返して、会場は大爆笑でしたw
Javaプラットフォームにおける Batch アプリケーション (JSR 352) JavaEE7で導入されるJBatchのセッション。担当はArun氏です。
このJBatchは、エンタープライズアプリケーションでよくある、バッチ処理を効率よく書くためのフレームワークです。セッションを受けつつTLを眺めてて知ったのですが、どうもSpring Batchと非常によく似た仕組みのようです。設定をXMLで記述していくのが少々面倒な気もしますが、この辺りが改善されていけば、バッチ処理のスタンダードになるかなーという感じ。JavaEE準拠のサーバはもちろん、スタンドアロンの環境でも実行可能との事。
エンタープライズ環境における並列処理の実装方法について 我らの王子こと、寺田さんによるConcurrency Utilityのセッション。
以前からJavaではThreadを使って、並列処理を書くことが可能でしたが、実際にはなかなか難しいものでした。これを簡単に行えるのがConcurrency Utilityです。実際に以下のデモを会場で見せていました。
 詳細は寺田氏のブログに詳しいですが、Concurrncy Utilityを使うことで、CPUリソースを無駄なく使うコードを、簡単に実装することができるようになります。
Java the Night 最後はお楽しみ（？）のJava the Night。日本のJava界を代表するエンジニアがLT&amp;amp;デモを行うという趣向です。 一人8分の持ち時間でした。どのLTもさすがはJava界のスーパーエンジニア！と唸らせる、最高に面白い内容でした。 前回のJavaOne Tokyoの時もそうでしたが、この最後のLT枠に参加せずして、Javaのイベントに参加したとは言えないくらい、充実した内容です。 なかでも印象に残ったのは、北海道の大学生2人。
プレゼンソフトなんですが、JavaFXで様々なエフェクトをつけることができるというものでした。彼らの初々しい（！）発表を聞きながら、その将来に期待をするとともに、まだまだ自分も頑張らなければ、と想いを新たにしました。
JavaSE7 日本語ドキュメント提供開始 そしてJava the Night終了後、寺田さんから重大な発表がありました。それはJavaSE7の日本語ドキュメントの提供を開始した、とのアナウンスでした。実はJavaSE7リリース後、しばらくしても日本語ドキュメントは提供されていませんでした。様々な方面から要望は上がっていましたが、残念ながら日本語ドキュメントは当分は提供されないという決定が、以前なされました。
影響度が大きい事を十分承知で申し上げます。誠に残念ながら直近で、提供の予定はございません。“@skrb: @yoshioterada それよりもJava SE 7の日本語のJavadocはリリースされないのでしょうか？”
&amp;mdash; Terada Yoshioさん (@yoshioterada) 2012年3月25日 
その後、有志を中心にボランティアで日本語化しようかといった動きもありましたが、本格化するには至りませんでした。
そして、Java Day Tokyoにてサプライズとでもいいましょうか、JavaSE7の日本語ドキュメント提供開始のアナウンスがされました。
JavaSE7がリリースされて随分経ちますが、これでようやくスタートライン。Java7を普通に使ってもらう環境が、日本でも整ったといった感じです。いろいろ想いはありますが、日本オラクル＆寺田さんの努力に敬意を表したいと思います。</description>
    </item>
    
    <item>
      <title>Java Day Tokyo 2013に参加してきた（基調講演）</title>
      <link>https://zephiransas.github.io/blog/2013/05/16/javadaytokyo2013/</link>
      <pubDate>Thu, 16 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://zephiransas.github.io/blog/2013/05/16/javadaytokyo2013/</guid>
      <description>前日、5月14日に秋葉原UDXにて開催されたJava Day Tokyo2013に参加してきました。 JavaOne Tokyo2012が開催されてからほぼ1年。去年イベントが終わった時には「もう、こういったイベントは当分ないだろうなぁ」とか思っていたので、JavaOneではないにしてもちゃんとイベントを開催してくれた日本オラクル＆寺田さんには感謝ですね。
Keynoteの報告 基本的には去年のサンフランシスコでのJavaOneとかで発表された内容とかぶる感じ。ただ、普段はこういった最新情報をチェックしていない人たちでも、イベントであれば直に最新情報を聞けるので、そういった人たちにリーチできるだけでも、意味はあるかと。 残念だったのは最初、写真撮影がNGにされていたこと。
写真撮影禁止とか、俺の仕事＼(^o^)／ｵﾜﾀ　#jdt2013
&amp;mdash; Takafumi Yoshida✅さん (@zephiransas) 2013年5月14日 
正直コレには参りました。参加者には自分のように地方のコミュニティに属していて、後日報告会をやろうと企画してる人も多いはず。またOracleとしても「Javaを前進させるためにはコミュニティの力が必要です！」と言ってるにもかかわらず、これではなぁ・・・
一応、Keynoteの半分を過ぎたあたりで、寺田さんが取り計らってくれたのか
ただ今から写真全面OKにしました。 #jdt2013
&amp;mdash; Terada Yoshioさん (@yoshioterada) 2013年5月14日 
とはなりました。なので前半の写真がありません(´・ω・`)
まずは日本オラクルの伊藤敬氏が壇上に。 前回のJavaOne Tokyoは六本木のアカデミーヒルズで開催されましたが「クール・ジャパンの代表格であるアキハバラでJavaのイベントをやったら、どうなるのか？その化学反応も楽しんで欲しい」とのこと。
最初に登壇したのはJava Technology AmbassadorのSimon Ritter氏。JavaSEの最新情報について公演しました。 2012年7月にリリースされたJava7は、Oracleの元でリリースされた最初のメジャーアップデート。世界中で利用されていることを紹介していました。 また、Windows,Mac OSX,Linuxをはじめ、ARMアーキテクチャ上でも動作することを紹介し、Javaがいまや様々なデバイスで動作していることも強調。 そして、（遅れはしたものの）2014年2月には正式リリース予定のJava8についても言及し、その中核はLambdaであるとのこと。Lambdaを使用することのメリットの一つとして、並列処理を容易に書けることを紹介していました。 現在、Java8はプレビュー版が提供されているので、これを通じて多くのフィードバックをして欲しい、とも言っていました。 今後Javaは2年サイクルでメジャーアップデートを行う予定で、そうなるとJava9は2016年リリースになるだろうとも。
次に壇上に上がったのはOracleのNandini Ramani氏。JavaFXや組み込みJavaなどについて公演しました。 Java8からはJavaFXはJavaFX8として、標準でJDKにバンドルされるようになります。そういった意味でもJavaFXはこれから注目の技術になりそうな予感です。
途中、Nandini氏は壇上にJim Weaver氏を招き、Jimが手元でJavaFXのデモを行なっていました。なぜかデモしてた機材がSurface Proでしたw 球体や円柱を3Dで表示し、それにことなる光源を当てて表示するといったデモや、それにテクスチャを貼り付けてみたり。また港湾での貨物運送にでもつかうんでしょうか、コンテナの位置などをJavaFXでレンダリングするようなものを紹介していました。どれも比較的短いコードで実装可能であるとのこと。 また、Jim氏は「When should you download JDK8?」と書かれたスライドを前に、「イツヤルカ？イマデショ！」と日本語でネタを披露していました。これには会場も爆笑w Keynoteで一番盛り上がったかもしれません。Jim氏もご満悦な様子でした。 （しかし、このネタをJim氏に教えたのは、いったい誰なのか気になります！）
（追記） @skrb さんに教えて頂きましたが、どうもこのネタはタクシーの運ちゃんから仕入れたようです。外人にネタを授けるとは、タクシーの運ちゃん、侮りがたし！！
次に壇上に上がったのはOracleのCameron Purdy氏。JavaEEの最新動向について公演を行いました。 JavaEEは次のメジャーバージョンであるJavaEE7のリリースを6月13日に控えています。そのJavaEE7についての話が主でした。
JavaEE7の主な新機能としては
 JBatch JSON対応 WebSocket対応  などを紹介。JavaEE準拠のAPサーバも18のメーカーから出荷されているとのこと。 その後OracleのArun Gupta氏を壇上に招き、WebSocketのデモを行なっていました。デモはよくあるWebSocketのチャットに始まり、その後はWhite Boardのアプリケーションをデモ。 やり取りをしている途中で回線が切断された場合でも、回線がもとにもどれば、最新の状態に簡単に復旧できるようなアプリケーションなんですが、これもWebSocketで簡単に実装できるとのこと。</description>
    </item>
    
  </channel>
</rss>