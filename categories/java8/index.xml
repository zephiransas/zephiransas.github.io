<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java8 on zephiransasのチラシの裏</title>
    <link>https://zephiransas.github.io/categories/java8/</link>
    <description>Recent content in Java8 on zephiransasのチラシの裏</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 12 Mar 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://zephiransas.github.io/categories/java8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java8で始めるLambda（基礎編）</title>
      <link>https://zephiransas.github.io/blog/2014/03/12/java8lambda/</link>
      <pubDate>Wed, 12 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://zephiransas.github.io/blog/2014/03/12/java8lambda/</guid>
      <description>まもなくリリース予定のJava8。その中でも最も大きなインパクトを持つというProject Lambdaについて、ここ数日調べてみました。 今からLambdaをはじめようとする人向けに、何回かに分けてまとめてみたいと思います。
インターフェースの宣言 まずは手始めに、引数で指定された文字列の前後に&amp;rdquo;[&amp;ldquo;と&amp;rdquo;]&amp;ldquo;をつける処理を考えてみましょう。
Lambdaを使用するには、まずインターフェースを宣言する必要があります。上記の仕様から考えると
 引数はString型の引数が1つ 戻り値もString型  となるので、この場合は以下の様なインターフェースを宣言します。
public interface LambdaInterface { String method(String value); }  ここで注意するべきことが1つ。Java8のLambdaとして使えるインターフェースには決まりがあるのですが、もっとも重要なのがインターフェースのメソッドが1つだけということです。インターフェースのメソッドが2つ以上ある場合には、それをLambdaとして使用することはできません。
これはLambdaの実装部分を書く際に、どのメソッドの内容を実装しているのかを書かないため、Lambdaを書いた場合はそのインターフェースがもつ唯一のメソッドに対して実装をおこなったとみなすからです。
一見、これは不便なように思ってしまうかもしれないですが、普段使うパターンのインターフェースのほとんどがjava.util.functionパッケージ内で用意されているので、実際にはそれ程不便ではありません。むしろ自分でインターフェースを用意するほうが稀かもしれません。
Lambdaを使った記述 早速、先に宣言したインターフェースを使ってLambdaを書いてみましょう。Lambdaを記述する際の基本となる文法は、以下のようになっています。
[インターフェース名] [lambda式の名前] = (引数の型 引数,...) -&amp;gt; { （実装） };  よってLambdaInterfaceを使って書くと、以下のようになります。
public class Sample { public static void main(String... args) { LambdaInterface lambda = (String value) -&amp;gt; { return &amp;quot;[&amp;quot; + value + &amp;quot;]&amp;quot;; }; System.out.println(lambda.method(&amp;quot;HOGE&amp;quot;)); } }  実行すると&amp;rdquo;[HOGE]&amp;ldquo;と出力されていることがわかると思います。
このように、匿名クラスを使った場合などと比べて、少ない記述量で実装できると思います。
Lambdaの省略記法 また、このLambdaの記述では、以下のルールで、省略した記述を使用することもできます。
 引数の型は（型推論できるので）省略できる 引数が1つの場合は、引数の()を省略できる 但し、引数なしの場合は省略できない 実装部分が1行の場合は、{}を省略可能。さらにreturn文も不要  上記ルールに沿ったLambdaであれば省略可能です。ですので先ほどのコードも以下の様に省略できます。</description>
    </item>
    
  </channel>
</rss>